{
    "name": "HandshakeApp",
    "structs": {
        "Pending": [
            {
                "name": "other",
                "type": "address"
            },
            {
                "name": "loc_hash",
                "type": "byte[]"
            },
            {
                "name": "ts",
                "type": "uint64"
            }
        ]
    },
    "methods": [
        {
            "name": "request_handshake",
            "args": [
                {
                    "type": "address",
                    "name": "other"
                },
                {
                    "type": "byte[]",
                    "name": "loc_hash"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_my_connections",
            "args": [],
            "returns": {
                "type": "address[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "desc": "\n    Boxes (per user):\n      - b\"c:\" + addr -> DynamicArray[Address]\n      - b\"p:\" + addr -> Pending\n    ",
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "connections": {
                    "keyType": "AVMBytes",
                    "valueType": "address[]",
                    "prefix": "Yzo="
                },
                "pending": {
                    "keyType": "AVMBytes",
                    "valueType": "Pending",
                    "prefix": "cDo="
                }
            }
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        132,
                        212
                    ],
                    "errorMessage": "Index access is out of bounds"
                },
                {
                    "pc": [
                        53,
                        69
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        103
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        56,
                        72
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        175
                    ],
                    "errorMessage": "cannot handshake with self"
                },
                {
                    "pc": [
                        274,
                        293,
                        466
                    ],
                    "errorMessage": "check self.connections entry exists"
                },
                {
                    "pc": [
                        211
                    ],
                    "errorMessage": "check self.pending entry exists"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiADAAEgJgQCYzoCAAAEFR98dQJwOjEbQQBEggIEbWwx3gS0PglUNhoAjgIAEgACIkMxGRREMRhEiAGFKkxQsCNDMRkURDEYRDYaATYaAogAUoABACJPAlQqTFCwI0MxGUD/zDEYFEQjQ4oCAiKL/iJZiwCLAQxBACKL/lcCAIsAJAskWIv/EkEACCOL/k8DTwOJiwAjCIwAQv/WIov+TwNPA4mKAgEiRweL/jEAE0QxADIHSRZJgANub3dMULAri/5QSb1FAUEA14sLvkxJTgKMB0RXACAxABJBAMSLB0kkWUsBFVKL/xJBALWLB4EiW0mLCQ5BAMOLCUwJgTwOQQCfKIsIUEmMAL1FAUEAjIsAvkSMAyiL/lBJjAG9RQFBAHOLAb5EjAWLA4v+iP87SU4CjANMjARAABSLA1cCAIv+UEkVJAoWVwYCTFCMBIsEjAMxAEmMAosFTIj/DUlOAowFTIwGQAAUiwVXAgCLAlBJFSQKFlcGAkxQjAaLBosASbxIiwO/iwFJvEhMv4sLvEgjjACJKYwFQv+NKYwDQv90i/6AAgAqUIsKUIv/UCuLCFBJvEhMvyKMAImLCQlC/zuKAAEoMQBQSb1FAUEABosAvkRMiSlC//o=",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 10,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}