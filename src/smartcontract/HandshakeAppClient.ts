/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'

export const APP_SPEC: Arc56Contract = {"name":"HandshakeApp","structs":{"Pending":[{"name":"other","type":"address"},{"name":"locHash","type":"byte[]"},{"name":"ts","type":"uint64"}]},"methods":[{"name":"request_handshake","args":[{"type":"address","name":"other"},{"type":"byte[]","name":"loc_hash"}],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"get_my_connections","args":[],"returns":{"type":"address[]"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}}],"arcs":[22,28],"desc":"\n    Boxes (per user):\n      - b\"c:\" + addr -> DynamicArray[Address]\n      - b\"p:\" + addr -> Pending\n    ","networks":{},"state":{"schema":{"global":{"ints":0,"bytes":0},"local":{"ints":0,"bytes":0}},"keys":{"global":{},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{"connections":{"keyType":"AVMBytes","valueType":"address[]","prefix":"Yzo="},"pending":{"keyType":"AVMBytes","valueType":"Pending","prefix":"cDo="}}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[132,212],"errorMessage":"Index access is out of bounds"},{"pc":[53,69],"errorMessage":"OnCompletion is not NoOp"},{"pc":[103],"errorMessage":"can only call when creating"},{"pc":[56,72],"errorMessage":"can only call when not creating"},{"pc":[175],"errorMessage":"cannot handshake with self"},{"pc":[274,293,466],"errorMessage":"check self.connections entry exists"},{"pc":[211],"errorMessage":"check self.pending entry exists"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"},"byteCode":{"approval":"CiADAAEgJgQCYzoCAAAEFR98dQJwOjEbQQBEggIEbWwx3gS0PglUNhoAjgIAEgACIkMxGRREMRhEiAGFKkxQsCNDMRkURDEYRDYaATYaAogAUoABACJPAlQqTFCwI0MxGUD/zDEYFEQjQ4oCAiKL/iJZiwCLAQxBACKL/lcCAIsAJAskWIv/EkEACCOL/k8DTwOJiwAjCIwAQv/WIov+TwNPA4mKAgEiRweL/jEAE0QxADIHSRZJgANub3dMULAri/5QSb1FAUEA14sLvkxJTgKMB0RXACAxABJBAMSLB0kkWUsBFVKL/xJBALWLB4EiW0mLCQ5BAMOLCUwJgTwOQQCfKIsIUEmMAL1FAUEAjIsAvkSMAyiL/lBJjAG9RQFBAHOLAb5EjAWLA4v+iP87SU4CjANMjARAABSLA1cCAIv+UEkVJAoWVwYCTFCMBIsEjAMxAEmMAosFTIj/DUlOAowFTIwGQAAUiwVXAgCLAlBJFSQKFlcGAkxQjAaLBosASbxIiwO/iwFJvEhMv4sLvEgjjACJKYwFQv+NKYwDQv90i/6AAgAqUIsKUIv/UCuLCFBJvEhMvyKMAImLCQlC/zuKAAEoMQBQSb1FAUEABosAvkRMiSlC//o=","clear":"CoEBQw=="},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type Pending = {
  other: string,
  locHash: Uint8Array,
  ts: bigint
}


/**
 * Converts the ABI tuple representation of a Pending to the struct representation
 */
export function PendingFromTuple(abiTuple: [string, Uint8Array, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.Pending, APP_SPEC.structs) as Pending
}

/**
 * The argument types for the HandshakeApp contract
 */
export type HandshakeAppArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'request_handshake(address,byte[])bool': {
      other: string
      locHash: Uint8Array
    }
    'get_my_connections()address[]': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'request_handshake(address,byte[])bool': [other: string, locHash: Uint8Array]
    'get_my_connections()address[]': []
  }
}

/**
 * The return type for each method
 */
export type HandshakeAppReturns = {
  'request_handshake(address,byte[])bool': boolean
  'get_my_connections()address[]': string[]
}

/**
 * Defines the types of available calls and state of the HandshakeApp smart contract.
 */
export type HandshakeAppTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'request_handshake(address,byte[])bool' | 'request_handshake', {
      argsObj: HandshakeAppArgs['obj']['request_handshake(address,byte[])bool']
      argsTuple: HandshakeAppArgs['tuple']['request_handshake(address,byte[])bool']
      returns: HandshakeAppReturns['request_handshake(address,byte[])bool']
    }>
    & Record<'get_my_connections()address[]' | 'get_my_connections', {
      argsObj: HandshakeAppArgs['obj']['get_my_connections()address[]']
      argsTuple: HandshakeAppArgs['tuple']['get_my_connections()address[]']
      returns: HandshakeAppReturns['get_my_connections()address[]']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    box: {
      keys: {}
      maps: {
        connections: Map<Uint8Array | string, string[]>
        pending: Map<Uint8Array | string, Pending>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type HandshakeAppSignatures = keyof HandshakeAppTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type HandshakeAppNonVoidMethodSignatures = keyof HandshakeAppTypes['methods'] extends infer T ? T extends keyof HandshakeAppTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the HandshakeApp smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends HandshakeAppSignatures> = HandshakeAppTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the HandshakeApp smart contract to the method's return type
 */
export type MethodReturn<TSignature extends HandshakeAppSignatures> = HandshakeAppTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = HandshakeAppTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type HandshakeAppCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type HandshakeAppDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: HandshakeAppCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the HandshakeApp smart contract
 */
export abstract class HandshakeAppParamsFactory {
  /**
   * Constructs a no op call for the request_handshake(address,byte[])bool ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static requestHandshake(params: CallParams<HandshakeAppArgs['obj']['request_handshake(address,byte[])bool'] | HandshakeAppArgs['tuple']['request_handshake(address,byte[])bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'request_handshake(address,byte[])bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.other, params.args.locHash],
    }
  }
  /**
   * Constructs a no op call for the get_my_connections()address[] ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getMyConnections(params: CallParams<HandshakeAppArgs['obj']['get_my_connections()address[]'] | HandshakeAppArgs['tuple']['get_my_connections()address[]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_my_connections()address[]' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the HandshakeApp smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class HandshakeAppFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `HandshakeAppFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand as AlgorandClient
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new HandshakeAppClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new HandshakeAppClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the HandshakeApp smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: HandshakeAppDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new HandshakeAppClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the HandshakeApp smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the HandshakeApp smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the HandshakeApp smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new HandshakeAppClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the HandshakeApp smart contract
 */
export class HandshakeAppClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `HandshakeAppClient`
   *
   * @param appClient An `AppClient` instance which has been created with the HandshakeApp app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `HandshakeAppClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends HandshakeAppNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `HandshakeAppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<HandshakeAppClient> {
    return new HandshakeAppClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `HandshakeAppClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<HandshakeAppClient> {
    return new HandshakeAppClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand as AlgorandClient
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the HandshakeApp smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the HandshakeApp smart contract using the `request_handshake(address,byte[])bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    requestHandshake: (params: CallParams<HandshakeAppArgs['obj']['request_handshake(address,byte[])bool'] | HandshakeAppArgs['tuple']['request_handshake(address,byte[])bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(HandshakeAppParamsFactory.requestHandshake(params))
    },

    /**
     * Makes a call to the HandshakeApp smart contract using the `get_my_connections()address[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getMyConnections: (params: CallParams<HandshakeAppArgs['obj']['get_my_connections()address[]'] | HandshakeAppArgs['tuple']['get_my_connections()address[]']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(HandshakeAppParamsFactory.getMyConnections(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the HandshakeApp smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the HandshakeApp smart contract using the `request_handshake(address,byte[])bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    requestHandshake: (params: CallParams<HandshakeAppArgs['obj']['request_handshake(address,byte[])bool'] | HandshakeAppArgs['tuple']['request_handshake(address,byte[])bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(HandshakeAppParamsFactory.requestHandshake(params))
    },

    /**
     * Makes a call to the HandshakeApp smart contract using the `get_my_connections()address[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getMyConnections: (params: CallParams<HandshakeAppArgs['obj']['get_my_connections()address[]'] | HandshakeAppArgs['tuple']['get_my_connections()address[]']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(HandshakeAppParamsFactory.getMyConnections(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the HandshakeApp smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the HandshakeApp smart contract using the `request_handshake(address,byte[])bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    requestHandshake: async (params: CallParams<HandshakeAppArgs['obj']['request_handshake(address,byte[])bool'] | HandshakeAppArgs['tuple']['request_handshake(address,byte[])bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(HandshakeAppParamsFactory.requestHandshake(params))
      return {...result, return: result.return as unknown as (undefined | HandshakeAppReturns['request_handshake(address,byte[])bool'])}
    },

    /**
     * Makes a call to the HandshakeApp smart contract using the `get_my_connections()address[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getMyConnections: async (params: CallParams<HandshakeAppArgs['obj']['get_my_connections()address[]'] | HandshakeAppArgs['tuple']['get_my_connections()address[]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(HandshakeAppParamsFactory.getMyConnections(params))
      return {...result, return: result.return as unknown as (undefined | HandshakeAppReturns['get_my_connections()address[]'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new HandshakeAppClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current HandshakeApp app
   */
  state = {
    /**
     * Methods to access box state for the current HandshakeApp app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the connections map in box state
       */
      connections: {
        /**
         * Get all current values of the connections map in box state
         */
        getMap: async (): Promise<Map<Uint8Array, string[]>> => { return (await this.appClient.state.box.getMap("connections")) as Map<Uint8Array, string[]> },
        /**
         * Get a current value of the connections map by key from box state
         */
        value: async (key: Uint8Array | string): Promise<string[] | undefined> => { return await this.appClient.state.box.getMapValue("connections", key) as string[] | undefined },
      },
      /**
       * Get values from the pending map in box state
       */
      pending: {
        /**
         * Get all current values of the pending map in box state
         */
        getMap: async (): Promise<Map<Uint8Array, Pending>> => { return (await this.appClient.state.box.getMap("pending")) as Map<Uint8Array, Pending> },
        /**
         * Get a current value of the pending map by key from box state
         */
        value: async (key: Uint8Array | string): Promise<Pending | undefined> => { return await this.appClient.state.box.getMapValue("pending", key) as Pending | undefined },
      },
    },
  }

  public newGroup(): HandshakeAppComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a request_handshake(address,byte[])bool method call against the HandshakeApp contract
       */
      requestHandshake(params: CallParams<HandshakeAppArgs['obj']['request_handshake(address,byte[])bool'] | HandshakeAppArgs['tuple']['request_handshake(address,byte[])bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.requestHandshake(params)))
        resultMappers.push((v) => client.decodeReturnValue('request_handshake(address,byte[])bool', v))
        return this
      },
      /**
       * Add a get_my_connections()address[] method call against the HandshakeApp contract
       */
      getMyConnections(params: CallParams<HandshakeAppArgs['obj']['get_my_connections()address[]'] | HandshakeAppArgs['tuple']['get_my_connections()address[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getMyConnections(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_my_connections()address[]', v))
        return this
      },
      /**
       * Add a clear state call to the HandshakeApp contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as HandshakeAppComposer
  }
}
export type HandshakeAppComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the request_handshake(address,byte[])bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  requestHandshake(params?: CallParams<HandshakeAppArgs['obj']['request_handshake(address,byte[])bool'] | HandshakeAppArgs['tuple']['request_handshake(address,byte[])bool']>): HandshakeAppComposer<[...TReturns, HandshakeAppReturns['request_handshake(address,byte[])bool'] | undefined]>

  /**
   * Calls the get_my_connections()address[] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getMyConnections(params?: CallParams<HandshakeAppArgs['obj']['get_my_connections()address[]'] | HandshakeAppArgs['tuple']['get_my_connections()address[]']>): HandshakeAppComposer<[...TReturns, HandshakeAppReturns['get_my_connections()address[]'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the HandshakeApp smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): HandshakeAppComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): HandshakeAppComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<HandshakeAppComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<HandshakeAppComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<HandshakeAppComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<HandshakeAppComposerResults<TReturns>>
}
export type HandshakeAppComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

